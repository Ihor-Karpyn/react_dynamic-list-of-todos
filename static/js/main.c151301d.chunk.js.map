{"version":3,"sources":["api/api.js","components/CurrentUser/CurrentUser.jsx","components/TodoList/TodoList.jsx","App.jsx","index.js"],"names":["request","url","fetch","then","responce","json","data","getUser","id","CurrentUser","state","user","a","userId","this","props","setState","prevProps","onChangeUser","className","name","email","phone","type","onClick","React","PureComponent","TodoList","search","todoStatus","random","searchHandler","event","target","value","searchFilter","todos","searchToLower","toLowerCase","filter","title","includes","todoStatusHandler","todosCompletedFilter","completed","sort","Math","todosForShow","randomSort","onChange","placeholder","map","todo","key","classNames","checked","readOnly","App","selectedUserId","setSelectedUser","Component","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.c151301d.chunk.js","sourcesContent":["const baseUrl = 'https://mate-api.herokuapp.com';\n\nconst request = url => fetch(baseUrl + url)\n  .then(responce => responce.json())\n  .then(data => data.data);\n\nexport const getTodos = () => request('/todos');\nexport const getUsers = () => request('/users');\nexport const getUser = id => request(`/users/${id}`);\n","import React from 'react';\nimport './CurrentUser.scss';\nimport PropTypes from 'prop-types';\nimport { getUser } from '../../api/api';\n\nclass CurrentUser extends React.PureComponent {\n  state = {\n    user: null,\n  };\n\n  async componentDidMount() {\n    const { userId } = this.props;\n\n    if (userId) {\n      this.setState({\n        user: await getUser(userId),\n      });\n    }\n  }\n\n  async componentDidUpdate(prevProps) {\n    const { userId } = this.props;\n\n    if (userId !== prevProps.userId) {\n      // eslint-disable-next-line react/no-did-update-set-state\n      this.setState({\n        user: await getUser(userId),\n      });\n    }\n  }\n\n  render() {\n    const { user } = this.state;\n    const { onChangeUser } = this.props;\n\n    return (\n      <>\n        {user ? (\n          <div className=\"CurrentUser\">\n            <h2 className=\"CurrentUser__title\">\n              <span>\n                Selected user:\n                {user.id}\n              </span>\n            </h2>\n\n            <h3 className=\"CurrentUser__name\">{user.name}</h3>\n            <p className=\"CurrentUser__email\">{user.email}</p>\n            <p className=\"CurrentUser__phone\">{user.phone}</p>\n            <button\n              type=\"button\"\n              onClick={() => onChangeUser(null)}\n            >\n              clear\n            </button>\n          </div>\n        ) : (\n          <span>Loading...</span>\n        )\n        }\n      </>\n    );\n  }\n}\n\nCurrentUser.propTypes = {\n  onChangeUser: PropTypes.func.isRequired,\n  userId: PropTypes.number.isRequired,\n};\n\nexport default CurrentUser;\n","import React from 'react';\nimport './TodoList.scss';\nimport classNames from 'classnames';\nimport PropTypes from 'prop-types';\n\nclass TodoList extends React.PureComponent {\n  state = {\n    search: '',\n    todoStatus: 'all',\n    random: null,\n  }\n\n  searchHandler = (event) => {\n    this.setState({\n      search: event.target.value,\n    });\n  }\n\n  searchFilter = (todos) => {\n    if (!todos) {\n      return [];\n    }\n\n    const { search } = this.state;\n    const searchToLower = search.toLowerCase();\n\n    return todos.filter(({ title }) => (\n      title && title.toLowerCase().includes(searchToLower)));\n  }\n\n  todoStatusHandler = (event) => {\n    this.setState({\n      todoStatus: event.target.value,\n    });\n  }\n\n  todosCompletedFilter = (todos) => {\n    const { todoStatus } = this.state;\n\n    switch (todoStatus) {\n      case 'all':\n        return todos;\n      case 'active':\n        return todos.filter(({ completed }) => !completed);\n      case 'inactive':\n        return todos.filter(({ completed }) => completed);\n      default:\n        return todos;\n    }\n  }\n\n  // eslint-disable-next-line class-methods-use-this\n  randomSort(todos) {\n    return [...todos].sort(() => 0.5 - Math.random());\n  }\n\n  render() {\n    const { todos, onChangeUser } = this.props;\n    const { search, todoStatus, random } = this.state;\n    let todosForShow = this.searchFilter(todos);\n\n    todosForShow = this.todosCompletedFilter(todosForShow);\n    if (random) {\n      todosForShow = this.randomSort(todosForShow);\n    }\n\n    return (\n      <div className=\"TodoList\">\n        <h2>Todos:</h2>\n\n        <input\n          type=\"text\"\n          value={search}\n          onChange={this.searchHandler}\n          placeholder=\"search\"\n        />\n\n        <select\n          name=\"todoStatus\"\n          onChange={this.todoStatusHandler}\n          value={todoStatus}\n        >\n          <option value=\"all\">All</option>\n          <option value=\"active\">active</option>\n          <option value=\"inactive\">completed</option>\n        </select>\n\n        <button\n          type=\"button\"\n          onClick={() => this.setState({ random: Math.random() })}\n        >\n          randomSort\n        </button>\n\n        <div className=\"TodoList__list-container\">\n          <ul className=\"TodoList__list\">\n            {todosForShow.map(todo => (\n              <li\n                key={todo.id}\n                className={classNames(\n                  'TodoList__item',\n                  {\n                    'TodoList__item--unchecked': !todo.completed,\n                    'TodoList__item--checked': todo.completed,\n                  },\n                )}\n              >\n                <label>\n                  <input\n                    type=\"checkbox\"\n                    checked={todo.completed}\n                    readOnly\n                  />\n                  <p>{todo.title}</p>\n                </label>\n\n                <button\n                  // eslint-disable-next-line max-len\n                  className=\"TodoList__user-button TodoList__user-button--selected button\"\n                  type=\"button\"\n                  onClick={() => onChangeUser(todo.userId)}\n                >\n                  User&nbsp;#\n                  {todo.userId}\n                </button>\n              </li>\n            ))}\n          </ul>\n        </div>\n      </div>\n    );\n  }\n}\n\nTodoList.propTypes = {\n  todos: PropTypes.arrayOf(PropTypes.shape({\n    id: PropTypes.number.isRequired,\n    title: PropTypes.string,\n    completed: PropTypes.bool,\n  })).isRequired,\n  onChangeUser: PropTypes.func.isRequired,\n};\n\nexport default TodoList;\n","import React from 'react';\nimport './App.scss';\nimport './styles/general.scss';\nimport CurrentUser from './components/CurrentUser/CurrentUser';\nimport TodoList from './components/TodoList/TodoList';\nimport { getTodos } from './api/api';\n\nclass App extends React.Component {\n  state = {\n    todos: [],\n    selectedUserId: null,\n  };\n\n  async componentDidMount() {\n    this.setState({\n      todos: await getTodos(),\n    });\n  }\n\n  setSelectedUser = (id) => {\n    this.setState({\n      selectedUserId: id,\n    });\n  }\n\n  render() {\n    const { todos, selectedUserId } = this.state;\n\n    return (\n      <div className=\"App\">\n        <div className=\"App__sidebar\">\n          <TodoList todos={todos} onChangeUser={this.setSelectedUser} />\n        </div>\n\n        <div className=\"App__content\">\n          <div className=\"App__content-container\">\n            {selectedUserId ? (\n              <CurrentUser\n                userId={selectedUserId}\n                onChangeUser={this.setSelectedUser}\n              />\n            ) : 'No user selected'}\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}